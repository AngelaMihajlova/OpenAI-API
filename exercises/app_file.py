import streamlit as st
from openai import OpenAI
from dotenv import load_dotenv
import os
from PyPDF2 import PdfReader

# –í—á–∏—Ç–∞—ò API key
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

st.set_page_config(page_title="AI Chatbot + Multi File Auto", page_icon="ü§ñ")
st.title("ü§ñ AI Chatbot —Å–æ –ø–æ–≤–µ—ú–µ —Ñ–∞—ò–ª–æ–≤–∏ (–∞–≤—Ç–æ–º–∞—Ç—Å–∫–∏ –æ–¥–≥–æ–≤–æ—Ä)")

# --- –ò–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∞—Ü–∏—ò–∞ –Ω–∞ session_state ---
if "messages" not in st.session_state:
    st.session_state["messages"] = [
        {"role": "system", "content": "–¢–∏ —Å–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—ò –æ–¥–≥–æ–≤–∞—Ä–∞ –∫—Ä–∞—Ç–∫–æ –∏ —ò–∞—Å–Ω–æ."}
    ]
if "uploaded_files_texts" not in st.session_state:
    st.session_state["uploaded_files_texts"] = []

# --- –ö–æ–ø—á–µ –∑–∞ —á–∏—Å—Ç–µ—ö–µ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ—Ç ---
if st.button("üóëÔ∏è –ò–∑–±—Ä–∏—à–∏ –∏—Å—Ç–æ—Ä–∏—ò–∞"):
    st.session_state["messages"] = [
        {"role": "system", "content": "–¢–∏ —Å–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—ò –æ–¥–≥–æ–≤–∞—Ä–∞ –∫—Ä–∞—Ç–∫–æ –∏ —ò–∞—Å–Ω–æ."}
    ]
    st.session_state["uploaded_files_texts"] = []
    st.rerun()

# --- File uploader —Å–æ –ø–æ–≤–µ—ú–µ —Ñ–∞—ò–ª–æ–≤–∏ ---
uploaded_files = st.file_uploader(
    "–ü—Ä–∏–∫–∞—á–∏ PDF –∏–ª–∏ TXT —Ñ–∞—ò–ª–æ–≤–∏", type=["pdf", "txt"], accept_multiple_files=True
)

if uploaded_files:
    st.session_state["uploaded_files_texts"] = []  # reset –ø—Ä–µ–¥ –Ω–æ–≤ upload
    for uploaded_file in uploaded_files:
        if uploaded_file.type == "application/pdf":
            pdf = PdfReader(uploaded_file)
            text = ""
            for page in pdf.pages:
                text += page.extract_text() + "\n"
            st.session_state["uploaded_files_texts"].append(text)
        else:
            st.session_state["uploaded_files_texts"].append(uploaded_file.read().decode("utf-8"))
    st.success(f"üìÑ –ü—Ä–∏–∫–∞—á–µ–Ω–∏ {len(uploaded_files)} —Ñ–∞—ò–ª–æ–≤–∏ —É—Å–ø–µ—à–Ω–æ!")

# --- –ü—Ä–∏–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—ò–∞ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä ---
for msg in st.session_state["messages"]:
    if msg["role"] == "user":
        with st.chat_message("user"):
            st.markdown(msg["content"])
    elif msg["role"] == "assistant":
        with st.chat_message("assistant"):
            st.markdown(msg["content"])

# --- –ü–æ–ª–µ –∑–∞ –≤–Ω–µ—Å—É–≤–∞—ö–µ –ø–æ—Ä–∞–∫–∞ ---
if prompt := st.chat_input("–ù–∞–ø–∏—à–∏ –ø–æ—Ä–∞–∫–∞..."):
    st.session_state["messages"].append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # –ü–æ–¥–≥–æ—Ç–≤–∏ messages –∑–∞ OpenAI
    messages_to_send = st.session_state["messages"].copy()

    # –î–æ–¥–∞—ò —Ç–µ–∫—Å—Ç –æ–¥ —Å–∏—Ç–µ –ø—Ä–∏–∫–∞—á–µ–Ω–∏ —Ñ–∞—ò–ª–æ–≤–∏ –∫–∞–∫–æ system context
    for i, file_text in enumerate(st.session_state["uploaded_files_texts"], start=1):
        messages_to_send.append({
            "role": "system",
            "content": f"–§–∞—ò–ª {i} —Å–æ–¥—Ä–∂–∏:\n{file_text}"
        })

    # –ü–æ–≤–∏–∫ –¥–æ OpenAI
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages_to_send
    )
    answer = response.choices[0].message.content

    st.session_state["messages"].append({"role": "assistant", "content": answer})
    with st.chat_message("assistant"):
        st.markdown(answer)
